import logging
import os.path
import shutil


NLLB_CODES = {
    "als": "deu_Latn", # MISSING
    "amh": "amh_Ethi",
    "aze": "azj_Latn",
    "bam": "bam_Latn",
    "bbj": "fra_Latn", # MISSING
    "ewe": "ewe_Latn",
    "fon": "fon_Latn",
    "hau": "hau_Latn",
    'ibo': "ibo_Latn",
    'kin': "kin_Latn",
    'lug': "lug_Latn",
    'luo': "luo_Latn",
    'mos': "mos_Latn",
    'nya': "nya_Latn",
    'pcm': "eng_Latn", # MISSING
    'spa': "spa_Latn",
    'sna': "sna_Latn",
    'swa': "swh_Latn",
    'tha': "tha_Thai",
    'tsn': "tsn_Latn",
    "tur": "tur_Latn",
    'twi': "twi_Latn",
    'wol': "wol_Latn",
    'xho': "xho_Latn",
    'yor': "yor_Latn",
    'zho': "zho_Hans",
    'zul': "zul_Latn",
}

SHARED_TASK_2023_VAL_LANGS = {
    "als": "ALS", "aze": "AZ", "tur": "TR", "yor": "YO"
}

SHARED_TASK_2024_VAL_LANGS = SHARED_TASK_2023_VAL_LANGS

ENTS = ["PER", "ORG", "LOC"]

TAG_LIST = [
    "O", "B-PER", "I-PER", "B-ORG", "I-ORG", "B-LOC", "I-LOC"]

SPACY_TYPES = ["PERSON", "ORG", "LOC", "GPE"]


rule all:
    input:
        expand("task_2024_experiments/{method}/{lang}/{split}.score",
               lang=SHARED_TASK_2024_VAL_LANGS.keys(),
               split=["validation"],
               method=["spacy", "gliner-eng", "gliner-multi"]) #, "uner", "gliner-multi-tuned", "uner-tuned"])


localrules: prepare_submission_conll, output_as_conll, download_2023_validation, download_2024_validation

rule download_2023_validation:
    output:
        directory("task_2023_data/MRL_ST_2023_Val")
    shell:
        """
        mkdir -p task_2023_data/
        cd task_2023_data
        gdown -c --folder https://drive.google.com/drive/folders/15exVuU06dfbUWQtvSkRpA4JG4sxzgVli?usp=share_link
        """


rule download_2023_test:
    output:
        directory("task_2023_data/MRL_ST_2023_Test")
    shell:
        """
        mkdir -p task_2023_data/
        cd task_2023_data
        gdown --folder https://drive.google.com/drive/folders/1nkvzy7BLyFueANniAT9M5o0_-EnMy0Gc?usp=share_link -O MRL_ST_2023_Test
        """


rule download_2024_validation:
    output:
        directory("task_2024_data/MRL_ST_2024_Val")
    shell:
        """
        mkdir -p task_2024_data/
        cd task_2024_data
        gdown -c --folder https://drive.google.com/drive/folders/13b8f_2KAlYav9kcTne59NQzipvSgbaPe?usp=drive_link -O MRL_ST_2024_Val
        """


rule format_shared_task_conll:
    input:
        raw_val_data_dir="task_{year}_data/MRL_ST_{year}_Val",
        #raw_test_data_dir="task_{year}_data/MRL_ST_{year}_Test",
    output:
        text_file="task_{year}_data/{lang}/{split}.txt",
        tags_file="task_{year}_data/{lang}/{split}.tags",
        conll_file="task_{year}_data/{lang}/{split}.conll"
    wildcard_constraints:
        lang="|".join(list(SHARED_TASK_2024_VAL_LANGS.keys())),
    run:
        logger = logging.getLogger("format_shared_task_conll")
        logger.setLevel(logging.INFO)

        if wildcards.split == "validation":
            raw_split = "Val"
            data_dir = input.raw_val_data_dir
        elif wildcards.split == "test":
            raw_split = "Test"
            data_dir = input.raw_test_data_dir
        else:
            raise ValueError("Unknown split: {}".format(split))

        raw_file = os.path.join(
            data_dir,
            f"NER_{SHARED_TASK_2024_VAL_LANGS[wildcards.lang]}_{raw_split}.conll")

        logger.info("Copying CoNLL file: %s", raw_file)
        shutil.copy(raw_file, output.conll_file)

        logger.info("Reading CoNLL file: %s", raw_file)

        f_conll = open(raw_file, encoding="utf-8")
        f_text = open(output.text_file, "w")
        f_tags = open(output.tags_file, "w")

        sentence = []
        tags = []

        def print_sentence():
            print(" ".join(sentence), file=f_text)
            if wildcards.split == "validation":
                print(" ".join(tags), file=f_tags)

        f_conll.readline()
        for line in f_conll:
            line = line.strip()
            if not line:
                print_sentence()
                sentence = []
                tags = []
                continue
            fields = line.split(" ")
            sentence.append(fields[0])
            if wildcards.split == "validation":
                tags.append(fields[-1])
        if sentence:
            print_sentence()
        logger.info("Done.")


rule translate_input_text:
    input:
        src_text="{dataset}_data/{lang}/{split}.txt"
    output:
        tgt_text=protected("{dataset}_data/{lang}/{split}.eng")
    resources:
        mem="40G",
        cpus_per_task=8,
        slurm_partition="gpu-troja,gpu-ms",
        constraint="'gpuram48G|gpuram40G|gpuram24G'",
        slurm_extra="'--gres=gpu:1'",
        gpu=1
    run:
        from transformers import pipeline
        import torch

        logger = logging.getLogger("translate")
        logger.setLevel(logging.INFO)

        assert torch.cuda.is_available()

        logger.info("Loading model.")
        pipe = pipeline(
            "translation", model="facebook/nllb-200-3.3B", device=0,
            max_length=512)
        logger.info("Model loaded. Loading source text.")
        with open(input.src_text) as f:
            src_text = f.readlines()
        logger.info("Source text loaded. Translating.")
        translation = pipe(
            src_text,
            src_lang=NLLB_CODES[wildcards.lang],
            tgt_lang="eng_Latn")
        logger.info("Translation done. Writing to file.")
        with open(output.tgt_text, "w") as f:
            for line in translation:
                print(line['translation_text'], file=f)
        logger.info("Done.")


rule ner_with_spacy:
    input:
        "{dataset}_data/{lang}/{split}.eng"
    output:
        retokenized="{dataset}_experiments/spacy/{lang}/{split}-retok.eng",
        tags="{dataset}_experiments/spacy/{lang}/{split}.eng-tags",
    resources:
        mem="10G",
        cpus_per_task=4,
    run:
        import spacy

        logger = logging.getLogger("spacy")
        logger.setLevel(logging.INFO)

        logger.info("Loading model.")
        try:
            nlp = spacy.load("en_core_web_lg")
        except OSError:
            logger.info("Model not found. Downloading.")
            spacy.cli.download("en_core_web_lg")
            nlp = spacy.load("en_core_web_lg")

        logger.info("Model loaded. Processing input.")
        f_retokenized = open(output.retokenized, "w")
        f_tags = open(output.tags, "w")
        for line in open(input[0]):
            doc = nlp(line.strip())
            tokens = []
            tags = []
            for token in doc:
                tokens.append(token.text)
                if token.ent_iob_ == "O" or token.ent_type_ not in SPACY_TYPES:
                    tags.append("O")
                else:
                    ent_type = token.ent_type_
                    if ent_type == "PERSON":
                        ent_type = "PER"
                    elif ent_type == "GPE":
                        ent_type = "LOC"
                    elif ent_type == "FAC":
                        ent_type = "LOC"
                    tags.append(token.ent_iob_ + "-" + ent_type)
            print(" ".join(tokens), file=f_retokenized)
            print(" ".join(tags), file=f_tags)
        f_retokenized.close()
        f_tags.close()
        logger.info("Done.")


rule tune_uner:
    output:
        model_path="{dataset}_experiments/uner-tuned/tuned.log",
    resources:
        mem="40G",
        cpus_per_task=8,
        slurm_partition="gpu-troja,gpu-ms",
        slurm_extra="'--gres=gpu:1'",
        gpu=1,
    run:
        from collect_data import collect_data
        from ner_with_uner import tune_uner

        train_data = collect_data(["de_DE", "tr_polyglot", "yor_masakhaner2", "ibo_masakhaner2", "aze"], "train")
        dev_data = collect_data(["de_DE", "tr_polyglot", "yor_masakhaner2", "ibo_masakhaner2", "aze"], "dev")
        model_path = output.model_path

        tune_uner(train_data, dev_data, "universalner/uner_all", os.path.dirname(model_path))

        with open(output.model_path, "w") as f:
            print("Done.", file=f)


rule tune_gliner_multi:
    output:
        model_path="{dataset}_experiments/gliner-multi-tuned/tuned.log",
    resources:
        mem="40G",
        cpus_per_task=8,
        slurm_partition="gpu-troja,gpu-ms",
        slurm_extra="'--gres=gpu:1'",
        gpu=1,
    run:
        from collect_data import collect_data
        from ner_with_gliner import tune_gliner

        train_data = collect_data(["de_DE", "tr_polyglot", "yor_masakhaner2", "ibo_masakhaner2", "aze"], "train")
        dev_data = collect_data(["de_DE", "tr_polyglot", "yor_masakhaner2", "ibo_masakhaner2", "aze"], "dev")
        model_path = output.model_path
        tune_gliner(train_data, dev_data, "urchade/gliner_multi-v2.1", os.path.dirname(model_path),
            learning_rate=5e-6, epochs=5)

        with open(output.model_path, "w") as f:
            print("Done.", file=f)


rule eval_tuned_uner:
    input:
        model_path="{dataset}_experiments/uner-tuned/tuned.log",
        data="{dataset}_data/{lang}/{split}.txt"
    output:
        tags="{dataset}_experiments/uner-tuned/{lang}/{split}.orig-tags",
    resources:
        mem="40G",
        cpus_per_task=8,
        slurm_partition="gpu-troja,gpu-ms",
        slurm_extra="'--gres=gpu:1'",
        gpu=1,
    run:
        from ner_with_uner import run_uner

        run_uner(input.data, output.tags, os.path.dirname(input.model_path))


rule eval_tuned_gliner:
    input:
        model_path="{dataset}_experiments/gliner-multi-tuned/tuned.log",
        data="{dataset}_data/{lang}/{split}.txt"
    output:
        tags="{dataset}_experiments/gliner-multi-tuned/{lang}/{split}.orig-tags",
    resources:
        mem="40G",
        cpus_per_task=8,
        slurm_partition="gpu-troja,gpu-ms",
        slurm_extra="'--gres=gpu:1'",
        gpu=1,
    run:
        from ner_with_gliner import run_gliner

        with open(input.data) as f_in, open(output.tags, "w") as f_out:
            run_gliner(f_in, f_out, os.path.dirname(input.model_path))


rule ner_with_gliner_eng:
    input:
        "{dataset}_data/{lang}/{split}.eng-retok"
    output:
        tags="{dataset}_experiments/gliner-eng/{lang}/{split}.eng-tags",
        retokenized="{dataset}_experiments/gliner-eng/{lang}/{split}-retok.eng",
    resources:
        mem="40G",
        cpus_per_task=8,
        slurm_partition="gpu-troja,gpu-ms",
        slurm_extra="'--gres=gpu:1'",
        gpu=1
    run:
        from ner_with_gliner import run_gliner

        shutil.copy(input[0], output.retokenized)

        with open(input[0]) as f_in, open(output.tags, "w") as f_out:
            run_gliner(f_in, f_out, "urchade/gliner_large-v2.1")


rule ner_with_gliner_multi:
    input:
        "{dataset}_data/{lang}/{split}.txt"
    output:
        tags="{dataset}_experiments/gliner-multi/{lang}/{split}.orig-tags",
    resources:
        mem="40G",
        cpus_per_task=8,
        slurm_partition="gpu-troja,gpu-ms",
        slurm_extra="'--gres=gpu:1'",
        gpu=1,
    run:
        from ner_with_gliner import run_gliner

        with open(input[0]) as f_in, open(output.tags, "w") as f_out:
            run_gliner(f_in, f_out, "urchade/gliner_multi-v2.1")


rule ner_with_uner:
    input:
        "{dataset}_data/{lang}/{split}.txt"
    output:
        tags="{dataset}_experiments/uner/{lang}/{split}.orig-tags",
    resources:
        mem="10G",
        cpus_per_task=8,
        slurm_partition="gpu-troja,gpu-ms",
        slurm_extra="'--gres=gpu:1'",
        gpu=1,
    run:
        from ner_with_uner import run_uner

        run_uner(input[0], output.tags, "universalner/uner_all")


rule project_from_eng:
    input:
        retokenized="{dataset}_experiments/{experiment}/{lang}/{split}-retok.eng",
        tags="{dataset}_experiments/{experiment}/{lang}/{split}.eng-tags",
        target_text="{dataset}_data/{lang}/{split}.txt",
    output:
        "{dataset}_experiments/{experiment}/{lang}/{split}.orig-tags"
    resources:
        mem="40G",
        cpus_per_task=8,
        slurm_partition="gpu-troja,gpu-ms",
        constraint="'gpuram48G'",
        slurm_extra="'--gres=gpu:1'",
        gpu=1,
    run:
        from constrained_translate_with_tags import (
            project_markup, read_entities, format_entities)

        with open(input.retokenized) as f_retok:
            retokenized = f_retok.read().splitlines()
        with open(input.tags) as f_tags:
            eng_entities = read_entities(f_tags.read().splitlines())
        with open(input.target_text) as f_tgt:
            tgt_sentences = f_tgt.read().splitlines()

        projected_entities = project_markup(
            retokenized, eng_entities, tgt_sentences,
            tgt_lang=NLLB_CODES[wildcards.lang],
            model="ychenNLP/nllb-200-3.3B-easyproject",
            batch_size=8,
            max_span_len=5)

        tags = format_entities(tgt_sentences, projected_entities)

        with open(output[0], "w") as f:
            for line in tags:
                print(" ".join(line), file=f)


rule retokenize_english:
    input:
        "{dataset}/{lang}/{split}.eng"
    output:
        "{dataset}/{lang}/{split}.eng-retok"
    resources:
        mem="10G",
        cpus_per_task=4,
    shell:
        """
        sacremoses -l en -j 4 tokenize --xml-escape < {input} > {output}
        """


rule project_orig_to_eng:
    input:
        orig_text="{dataset}/{lang}/{split}.txt",
        tags="{dataset}/{lang}/{split}.tags",
        english="{dataset}/{lang}/{split}.eng-retok"
    output:
        protected("{dataset}/{lang}/{split}.eng-tags")
    resources:
        mem="40G",
        cpus_per_task=8,
        partition="gpu-troja,gpu-ms",
        flags="--gres=gpu:1 --constraint='gpuram48G'",
        gpu=1
    run:
        from constrained_translate_with_tags import (
            project_markup, read_entities, format_entities)

        with open(input.orig_text) as f_orig:
            orig_lines = f_orig.read().splitlines()
        with open(input.tags) as f_tags:
            entities = read_entities(f_tags.read().splitlines())
        with open(input.english) as f_eng:
            eng_lines = f_eng.read().splitlines()

        projected_entities = project_markup(
            orig_lines, entities, eng_lines,
            src_lang=NLLB_CODES[wildcards.lang],
            tgt_lang="eng_Latn",
            model="ychenNLP/nllb-200-3.3B-easyproject",
            batch_size=8,
            max_span_len=5)

        projected_tags = format_entities(eng_lines, projected_entities)

        with open(input.english, "r") as f_eng, \
            open(output[0], "w") as f_out:
            for eng_line, tags in zip(f_eng, projected_tags):
                print(f"{eng_line.strip()}\t{' '.join(tags)}", file=f_out)


rule evaluate_ner:
    input:
        system_output="{dataset}_experiments/{experiment}/{lang}/{split}.orig-tags",
        gold_standard="{dataset}_data/{lang}/{split}.tags",
    output:
        score="{dataset}_experiments/{experiment}/{lang}/{split}.score",
        report="{dataset}_experiments/{experiment}/{lang}/{split}.report"
    run:
        import evaluate
        import json

        metric = evaluate.load("seqeval")

        with open(input.system_output) as f:
            outputs = [line.strip().split() for line in f]
        with open(input.gold_standard) as f:
            golds = [line.strip().split() for line in f]

        score = metric.compute(predictions=outputs, references=golds)
        for ent in ENTS:
            if ent not in score:
                continue
            score[ent]["number"] = int(score[ent]["number"])

        with open(output.report, "w") as f:
            print(json.dumps(score, indent=4), file=f)
        with open(output.score, "w") as f:
            print(score['overall_f1'], file=f)


rule output_as_conll:
    input:
        orig_conll="task_{year}_data/{lang}/{split}.conll",
        tags="task_{year}_experiments/{method}/{lang}/{split}.orig-tags",
    output:
        "task_{year}_experiments/{method}/{lang}/{split}.conll"
    run:
        f_tags = open(input.tags, encoding="utf-8")
        f_orig = open(input.orig_conll, encoding="utf-8")
        f_out = open(output[0], "w", encoding="utf-8")

        conll_line = None
        for line in f_tags:
            tags = line.strip().split()
            conll_line = f_orig.readline().strip()
            while not conll_line or conll_line.startswith("#") or "DOCSTART" in conll_line:
                print(conll_line, file=f_out)
                conll_line = f_orig.readline().strip()
            for tag in tags:
                fields = conll_line.split()[:3]
                assert len(fields) == 3
                print(" ".join(fields + [tag]), file=f_out)
                conll_line = f_orig.readline().strip()
            print(file=f_out)

        f_tags.close()
        f_orig.close()
        f_out.close()


rule prepare_submission_conll:
    input:
        lambda wildcards: "task_experiments/tner-ontonotes5/{lang3}/test.conll".format(
            lang3=next(key for key, value in SHARED_TASK_TEST_LANGS.items() if value == wildcards.tasklang))
    output:
        "submission/CUNI_NER_{tasklang}_Test.conll"
    shell:
        """
        mkdir -p submission
        cp "{input}" "{output}"
        """
